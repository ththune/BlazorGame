@using System.Timers
@using BlazorGame.GameLogic

@implements IDisposable

@code {
    [Parameter] public int Rows { get; set; } = 30;
    [Parameter] public int Columns { get; set; } = 30;
    private BoardLogic _board = null!;
    private SnakeLogic _snake = null!;
    private (int Row, int Column) _foodPosition;
    private Timer? _timer;
    private ElementReference _boardRef;
    private bool _hasFocused;
    private static readonly Random Random = new();


    // Initialize this component
    protected override void OnInitialized()
    {
        _board = new BoardLogic(Rows, Columns);
        _snake = new SnakeLogic(Rows / 2, Columns / 2);
        SpawnFood();

        _timer = new Timer(200);
        _timer.Elapsed += (_, _) => MoveSnake();

        _timer.Start();
        base.OnInitialized();
    }

    private void SpawnFood()
    {
        var emptyCells = GetEmptyCells();
        _foodPosition = emptyCells[Random.Next(emptyCells.Count)];
    }

    private List<(int rows, int columns)> GetEmptyCells()
    {
        var emptyCells = new List<(int rows, int columns)>();
        for (var row = 0; row < Rows; row++)
        {
            for (var column = 0; column < Columns; column++)
            {
                if (!IsSnakeCell(row, column)) emptyCells.Add((row, column));
            }
        }

        return emptyCells;
    }


    private bool IsSnakeCell(int row, int column) =>
        _snake.Body.Any(body => body.Row == row && body.Column == column);

    private bool IsFoodCell(int row, int column) =>
        _foodPosition.Row == row && _foodPosition.Column == column;

    private void MoveSnake()
    {
        InvokeAsync(() =>
        {
            // Check if the snake has eaten food
            var hasEatenFood = _snake.Head.Row == _foodPosition.Row && _snake.Head.Column == _foodPosition.Column;
            _snake.Move(grow: hasEatenFood);
            // If the snake has eaten food, spawn new food
            if (hasEatenFood) SpawnFood();

            StateHasChanged();
        });
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        Direction? newDirection = e.Key switch
        {
            "ArrowUp" or "w" or "W" => Direction.Up,
            "ArrowDown" or "s" or "S" => Direction.Down,
            "ArrowLeft" or "a" or "A" => Direction.Left,
            "ArrowRight" or "d" or "D" => Direction.Right,
            _ => null
        };

        if (newDirection.HasValue) _snake.ChangeDirection(newDirection.Value);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_hasFocused)
        {
            _hasFocused = true;
            await _boardRef.FocusAsync();
        }
    }


    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }

}

<div class="board" style="--rows: @Rows; --columns: @Columns;" tabindex="0" @onkeydown="HandleKeyDown" @ref="_boardRef">
    @for (var row = 0; row < _board.Rows; row++)
    {
        <div class="board-row">
            @for (var column = 0; column < _board.Columns; column++)
            {
                var snakeClass = IsSnakeCell(row, column) ? "snake-cell" : "";
                var foodClass = IsFoodCell(row, column) ? "food-cell" : "";
                <div class="board-cell @snakeClass @foodClass"></div>
            }
        </div>
    }
</div> 

